PROMPTS = {
  "ABAP Dictionary": "Extract only the core technical structure of a SAP Dictionary Display Table screen from the image. Return the result as JSON in the following format: { \"Fields\": [ { \"FieldName\": \"name\", \"Key\": true/false, \"Initial\": true/false, \"DataElement\": \"data_element_name\", \"DataType\": \"CHAR/DATS/...\", \"Length\": number, \"DecimalPlaces\": number }, ... ] } Only include technical metadata fields: FieldName, Key, Initial, DataElement, DataType, Length, DecimalPlaces. Do not include any fields that contain personal identifiers (Frields contain /BIC/) or user-specific codes. Do not include any language-dependent elements such as descriptions or labels (e.g., Short Description, Kurzbeschreibung, gültig ab). Output must be anonymized and language-independent, reusable across SAP systems.",
  "BW4Cockpit (Stammdaten)": "From the provided SAP table screenshot, extract only structural metadata in JSON format:\n\n{\n  \"CleanedColumns\": [\"Cleaned\", \"column\", \"names\"],\n  \"HasLongTextColumn\": true/false,\n  \"LongTextConsistentStructure\": true/false or null,\n  \"InvalidLongTextValues\": [\"List of incorrect entries\"]\n}\n\nInstructions:\n- Extract and clean column names by removing any student- or object-specific suffixes (e.g., 'TE8 018' → 'Semester').\n- Return cleaned column names in 'CleanedColumns'.\n- Check whether a column named 'Long Text' exists:\n   - If yes, set 'HasLongTextColumn': true\n   - If no, set 'HasLongTextColumn': false, 'LongTextConsistentStructure': null, 'InvalidLongTextValues': []\n\n If 'HasLongTextColumn': true and  if there is a row, which contains 'BAU' for Example 'BAU - Bauwesen (Gi)' then set 'LongTextConsistentStructure': true.\n- Otherwise, set it to false and write 'Bauwesen(GI)' in 'InvalidLongTextValues'.\n\nReturn ONLY the metadata JSON. Do NOT extract or return full table data.",
  "Data Source": "From the provided screenshot of a DataSource definition screen in SAP BW (Eclipse), extract the following metadata and return it as a valid JSON object with this structure:\n{\n  \"IgnoredHeaderRows\": <number from the field 'Zu ignorierende Kopfzeilen'>,\n  \"FieldSeparatorSet\": true | false,  // true if the field 'Datenseparator' contains a visible character (e.g. ; or :), false if empty\n  \"EscapeCharacterSet\": true | false, // true if the field 'Escape-Zeichen' contains a visible character (e.g. \"), false if empty\n  \"ZahlenformatFestlegen\": true | false // true if the checkbox 'Zahlenformat festlegen' is selected (✓), otherwise false\n}\n\nInstructions:\n- Do not extract file paths, technical names, usernames, or any information unrelated to the four fields listed above.\n- If the 'Zu ignorierende Kopfzeilen' field is empty, return null.\n- The result must be a valid JSON object with no extra explanation or comments.",
  "Datenvorschau": "From the provided SAP BW4/HANA screenshot, analyze the data preview section. If the table is labeled 'Datenvorschau für DataSource' (or equivalent in English), extract and return only the column headers of the table as a JSON list under the key 'Columns'. If the table belongs to 'BW Reporting Vorschau' (or 'BW Reporting Preview'), extract and return the column headers together with the last row (totals) as a JSON object in the format: { 'Header1': 'Value1', 'Header2': 'Value2', ... }. Ignore all other interface content and return only the required structured data.",
  "Bewegungsdaten": "From the provided image of a structured text data file, extract the following metadata in JSON format:\n\n{\n  \"ColumnDelimiter\": \"Detected character used to separate columns (e.g., ';' or '#')\",\n  \"FirstRow\": [\"First\", \"row\", \"values\", \"...\"],\n  \"ColumnCount\": number,\n  \"Columns\": [\"Header1\", \"Header2\", \"...\"] or null if not available\n}\n\nInstructions:\n- Identify the delimiter character used to separate columns.\n- Extract the first complete data row, split it using the delimiter, and output as an array under \"FirstRow\".\n- Set \"ColumnCount\" equal to the length of this array.\n- If a header row exists, extract column names; otherwise, set \"Columns\": null.\n- Only output the above metadata, no additional data rows are required.",
  "Composite Provider": "Given images of Composite Provider in SAP BW4HANA scenario in Eclipse, extract all valid field mappings between Source and Target fields based only on visible connector lines. For each mapping: extract the display/business name if visible; otherwise, use the technical name. Normalize both Source and Target as follows: (1) convert to lowercase, (2) replace substrings: 'bereich' → 'fachbereich', 'bachelor' → 'bachelorarbeiten', 'promo' → 'promotionen', 'studier' → 'studierenden', 'dritt' → 'drittmittel', 'landes' → 'landesmittel', 'semes' → 'semester', 'bund' → 'bundesland', (3) remove all digits and any non-letter characters (keep only letters a–z). Only include mappings where a visible line connects a Source field to a Target field. Count each line as one mapping → this is 'TotalMappings'. Return the result in JSON format sorted alphabetically by 'Source': { \"Mappings\": [ { \"Source\": \"<normalized_name_without_digits>\", \"Target\": \"<normalized_name_without_digits>\" }, ... ], \"TotalMappings\": <number_of_connections> }",
  "Data Flow Object": "From the provided screenshot of a SAP BW Data Flow Object in Eclipse, determine whether each expected object is correctly connected using a  directional arrow (Verbindung).  lines without arrows are only structural and must be ignored.\n\nFocus only on the following connection types:\n- From a Data Source (contains 'DS') to a Data Flow Object (contains 'DF', e.g., semester_1 or semester_2)\n- From a Data Source or Data Flow Object to an aDSO (contains 'DHS' or 'DMH')\n- From an aDSO to a Data Mart\n\nIgnore any links involving PC_FILE.\n\nA valid connection is represented visually by a  line with an arrow.\nIf an expected connection is missing (i.e., the object has no incoming or outgoing arrow where one is expected), it must be marked as `Connected: false`.\n\nNormalize all object names using the following rules:\n- Remove any technical prefix such as TE5, TE8, TES, etc.\n- Convert names to lowercase\n- If the object name contains:\n  - 'DS' → normalize as \"data_source\" (append _1, _2, etc. based on visual order)\n  - 'DF' → normalize as \"data_flow_object\"\n  - 'DHS' or 'DMH' → normalize as \"adso\"\n  - otherwise: just lowercase and cleaned\n\nReturn each expected or detected connection in the following JSON format:\n\n{\n  \"Source\": \"<normalized_source_name>\",\n  \"Target\": \"<normalized_target_name>\",\n  \"Connected\": true | false\n}\n\nOnly return valid JSON under the key `\"Connections\"`. Do not include any explanation or metadata.",
  "DTP": "From the provided screenshot of a DTP (Data Transfer Process) monitor screen in SAP BW (Eclipse), analyze the 'Request Processing' section.\n\n Extract and list each 'Data Package' along with the corresponding number of 'Data Records' processed.\n\nReturn the result in the following JSON format:\n{\n  'DataPackages': [\n    {\n      'Name': '<data_package_name>',\n      'RecordCount': <number>\n    },\n    ...\n  ]\n}\n\nOnly include visible data package rows. Do not infer or summarize non-displayed packages. Return a valid JSON object with no explanation or extra metadata.",
  "Excel":"From the provided screenshot of an Excel file, extract the column headers and the values from the “Overall Result” (or equivalent summary row, usually the last row in the table). Return the output as a valid JSON object where each key is the column name and each value is the corresponding total from the summary row.\n\nInstructions:\n- Ignore the first column if it contains labels like 'Fachbereich', 'Bundesland', etc., and only extract numerical summary data.\n- Ensure that the numbers are treated as strings (to preserve formatting like commas or dots if present).\n- Do not extract intermediate row values, only the header and the bottom “Overall Result” row.\n- Return one JSON object per image.\n\nExpected JSON format example:\n{\n  \"Anzahl Bachelorarbeit\": \"4.453.046\",\n  \"Anzahl der Promotion\": \"664.678\",\n  \"Anzahl der Studieren\": \"6.652.029\"\n}",
  "Transformation": "Given images of an SAP BW transformation scenario in Eclipse, extract all valid field mappings between Source and Target fields based only on visible connector lines. For each mapping: extract the display/business name if visible; otherwise, use the technical name. Normalize both Source and Target as follows: (1) convert to lowercase, (2) replace substrings: 'bereich' → 'fachbereich', 'bachelor' → 'bachelorarbeiten', 'promo' → 'promotionen', 'studier' → 'studierenden', 'dritt' → 'drittmittel', 'landes' → 'landesmittel', 'semes' → 'semester', 'bund' → 'bundesland', (3) remove all digits and any non-letter characters (keep only letters a–z). Only include mappings where a visible line connects a Source field to a Target field. Count each line as one mapping → this is 'TotalMappings'. Return the result in JSON format sorted alphabetically by 'Source': { \"Mappings\": [ { \"Source\": \"<normalized_name_without_digits>\", \"Target\": \"<normalized_name_without_digits>\" }, ... ], \"TotalMappings\": <number_of_connections> }",
  "Query":"From the provided screenshot of a SAP BW Query definition in Eclipse, extract the following information and return it as a JSON object:\n Extract all visible field labels under the sections labeled 'Spalten' (or 'Columns'), 'Zeilen' (or 'Rows'), and 'Freie Merkmale' (or 'Free Characteristics').\n- Only extract the user-facing names (e.g., 'Anteil Promotion', 'Anzahl der Studierenden'),\n- Do not include technical (TE-numbers ) names like TE6 017, TE8 017 e.g. Semester TE8 012 -> Semester, Fachbereich TE8 016 --> Fachbereich. or anything in square brackets.\n\n  In the section titled 'Eigenschaften' (or 'Properties'), extract:\n The content of the 'Beschreibung' (or 'Description') field, only if it does not contain TE-numbers.\n The value of 'Anzahl Dezimalstellen' (or 'Number of Decimal Places') if a section labeled 'Anzeigen' (or 'Display') is visible. If the section is not visible, return 'nicht vorhanden'.\n\\n\ 3. From the query title (e.g., shown as 'Datenblatt-Definition: TE8_012_Q5_HS - ...'), extract the query number in the format 'Q1' to 'Q5'.\n\- If a malformed version is detected like 'Q112', extract only the first valid prefix (e.g., 'Q1').\n\\n\Return your result using the following JSON structure:\n\{\n\'Query': 'Q1' | 'Q2' | 'Q3' | 'Q4' | 'Q5',\n\'Columns': [...],\n\'Rows': [...],\n\'FreeCharacteristics': [...],\n\'Description': <string | null>,\n\'DecimalPlaces': <string | 'nicht vorhanden'>\n\}\n\ Only return valid JSON. Do not add any explanation or extra comments. Only return valid JSON. Do not add any explanation or extra comments.",
  "Data Mart": "From the provided screenshot of a SAP BW DataStore Object (Advanced), extract all selected (filled) options from the section titled 'Modellierungseigenschaften'. This includes both main radio buttons and any selected checkboxes underneath them. Ignore any unselected or grayed-out options. Do NOT extract any personal identifiers such as 'Technischer Name'.\n\nReturn the selected modeling properties in the following JSON format:\n\n{\n  \"SelectedOption1\": \"<selected_option_1>\",\n  \"SelectedOption2\": \"<selected_option_2>\",\n  ...\n}\n\nRules:\n- Output must be valid JSON.\n- The option names must match exactly what is displayed in the screenshot.\n- Number each selected option in order (SelectedOption1, SelectedOption2, etc.).\n- Do not include any explanation, metadata, or unselected items.",
  "Data Store Object": "From the provided screenshot of a SAP BW DataStore Object (Advanced), extract all selected (filled) options from the section titled 'Modellierungseigenschaften'. This includes both main radio buttons and any selected checkboxes underneath them. If the field contains 'Staging' then rename to 'Staging-DataStore-Objekt', 'Eingangs', then renames to Nur 'Eingangs-Queue','Mart' then renames to 'Data-Mart-DataStore-Objekt' . Ignore any unselected or grayed-out options.Ignore fields contain 'Hot', 'Cold', 'Warm', 'Objektebene' and 'Partitionsebene'. Do NOT extract any personal identifiers such as 'Technischer Name'.\n\nReturn the selected modeling properties in the following JSON format:\n\n{\n  \"SelectedOption1\": \"<selected_option_1>\",\n  \"SelectedOption2\": \"<selected_option_2>\",\n  ...\n}\n\nRules:\n- Output must be valid JSON.\n- The option names must match exactly what is displayed in the screenshot.\n- Number each selected option in order (SelectedOption1, SelectedOption2, etc.).\n- Do not include any explanation, metadata, or unselected items."


}

def get_prompt(photo_type: str) -> str:
  print("Vom Benutzer ausgewählter Bildtyp:", photo_type)
  return PROMPTS.get(photo_type, "Bildbeschreibung und Rückgabe von JSON.")

