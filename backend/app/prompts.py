PROMPTS = {
  "ABAP Dictionary": "Extract only the core technical structure of a SAP Dictionary Display Table screen from the image. Return the result as JSON in the following format: { \"Fields\": [ { \"FieldName\": \"name\", \"Key\": true/false, \"Initial\": true/false, \"DataElement\": \"data_element_name\", \"DataType\": \"CHAR/DATS/...\", \"Length\": number, \"DecimalPlaces\": number }, ... ] } Only include technical metadata fields: FieldName, Key, Initial, DataElement, DataType, Length, DecimalPlaces. Do not include any fields that contain personal identifiers (Frields contain /BIC/) or user-specific codes. Do not include any language-dependent elements such as descriptions or labels (e.g., Short Description, Kurzbeschreibung, gültig ab). Output must be anonymized and language-independent, reusable across SAP systems.",
  "BW4Cockpit (Stammdaten)": "From the provided SAP table screenshot, extract only structural metadata in JSON format:\n\n{\n  \"CleanedColumns\": [\"Cleaned\", \"column\", \"names\"],\n  \"HasLongTextColumn\": true/false,\n  \"LongTextConsistentStructure\": true/false or null,\n  \"InvalidLongTextValues\": [\"List of incorrect entries\"]\n}\n\nInstructions:\n- Extract and clean column names by removing any student- or object-specific suffixes (e.g., 'TE8 018' → 'Semester').\n- Return cleaned column names in 'CleanedColumns'.\n- Check whether a column named 'Long Text' exists:\n   - If yes, set 'HasLongTextColumn': true\n   - If no, set 'HasLongTextColumn': false, 'LongTextConsistentStructure': null, 'InvalidLongTextValues': []\n\nA Long Text value is valid ONLY IF it contains the exact substring:\n  ' - ' (space, dash, space)\n\n. If the value does not contain ' - ', it is invalid — regardless of other formatting or content.\n- Do not check letter casing, length, or special characters.\n- If all values contain ' - ', set 'LongTextConsistentStructure': true.\n- Otherwise, set it to false and list only those invalid entries in 'InvalidLongTextValues'.\n\nReturn ONLY the metadata JSON. Do NOT extract or return full table data.",
  "Datenvorschau": "Analyze SAP BW process chains. List steps and highlight missing or changed tasks.",
  "DTP": "Compare two SAP BW data loading process flows. Note changes in data sources, targets, or steps.",
  "Bewegungsdaten": "From the provided image of a structured text data file, extract the following metadata in JSON format:\n\n{\n  \"ColumnDelimiter\": \"Detected character used to separate columns (e.g., ';' or '#')\",\n  \"FirstRow\": [\"First\", \"row\", \"values\", \"...\"],\n  \"ColumnCount\": number,\n  \"Columns\": [\"Header1\", \"Header2\", \"...\"] or null if not available\n}\n\nInstructions:\n- Identify the delimiter character used to separate columns.\n- Extract the first complete data row, split it using the delimiter, and output as an array under \"FirstRow\".\n- Set \"ColumnCount\" equal to the length of this array.\n- If a header row exists, extract column names; otherwise, set \"Columns\": null.\n- Only output the above metadata, no additional data rows are required.",
  "Composite Provider":"SAP BW CompositeProvider scenario in Eclipse, extract all valid field mappings between Source and Target based on visible blue connector lines and return the result in JSON format:\n\n{\n  \"Mappings\": [\n    {\n      \"Source\": \"<normalized_name_without_digits>\",\n      \"Target\": \"<normalized_name_without_digits>\"\n    },\n    ...\n  ],\n  \"TotalMappings\": <number_of_blue_connections>\n}\n\nInstructions:\n- Only include mappings where a visible **light blue line** connects a Source field to a Target field.\n- Count each blue line as one mapping → this is 'TotalMappings'.\n\nField naming:\n- Extract the display/business name if visible, otherwise fallback to the technical name.\n- Normalize both Source and Target as follows:\n  1. Convert to lowercase\n  2. Replace substrings:\n     - 'bereich' → 'fachbereich'\n  \n     - 'bachelor' → 'bachelorarbeiten'\n     - 'promo' → 'promotionen'\n     - 'studier' → 'studierenden'\n \n     - 'dritt' → 'drittmittel'\n  \n     - 'landes' → 'landesmittel'\n \n     - 'semes' → 'semester'\n \n     - 'bund' → 'bundesland'\n 3. Remove all digits and any non-letter characters (keep only letters a–z)\n     - Example: 'Anzahl Bachelorabsolventen 2023' → 'bachelorarbeiten'\n     - 'TE8_003BA' → 'teba' → becomes 'bachelorarbeiten' if rule applies\n\nSorting:\n- Sort the final list **alphabe**",
  "Data Flow Object": "Compare two SAP BW data loading process flows. Note changes in data sources, targets, or steps.",
  "Excel": "Compare two SAP BW data loading process flows. Note changes in data sources, targets, or steps.",
  "Query": "Compare two SAP BW data loading process flows. Note changes in data sources, targets, or steps.",
  "Transformationen": "Compare two SAP BW data loading process flows. Note changes in data sources, targets, or steps."

}

def get_prompt(photo_type: str) -> str:
  print("Vom Benutzer ausgewählter Bildtyp:", photo_type)
  return PROMPTS.get(photo_type, "Bildbeschreibung und Rückgabe von JSON.")

